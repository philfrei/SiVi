/*

Copyright (c) 2013, Phil Freihofner, Sumio Kiyooka

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    (1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

    (2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in
    the documentation and/or other materials provided with the
    distribution.

    (3) The name of the author may not be used to
    endorse or promote products derived from this software without
    specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

*/


/**
 * The following code is provided to allow the reader to view and use in
 * their own programs.  It will faithfully reproduce the combined texture.
 *
 * This exported code is licensed under the BSD license while the actual
 * source code to the SiVi application is licensed under the GPL.
 *
 * To use, save this code to a file of the name: "TestTemplate.java"
 * Save it without formatting (i.e. as a Plain Text file).
 *
 * Tip: to avoid clutter save the .java file in its own folder because
 * several .class files will be generated on compilation.
 *
 * From the command prompt, compile by typing:
 *     javac TestTemplate.java
 *
 * Then run it via the command:
 *     java TestTemplate
 */
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.awt.Point;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestTemplate extends JPanel {

    private BufferedImage testImage;

    /**
     * @param width     image width
     * @param height    image height
     */
    TestTemplate(int width, int height) {

        BufferedImage image = new BufferedImage(width, height,
                BufferedImage.TYPE_INT_ARGB);
        WritableRaster raster = image.getRaster();

// --- begin dynamically generated code ---
{0}
// --- end dynamically generated code ---

        int[][] pixels = TextureFunctions.combine(textures, combine);

        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int[] pixel = new int[4]; //[0]=r, [1]=g, [2]=b, [3]=alpha
                pixel[0] = ColorMap.getRed(pixels[x][y]);
                pixel[1] = ColorMap.getGreen(pixels[x][y]);
                pixel[2] = ColorMap.getBlue(pixels[x][y]);
                pixel[3] = ColorMap.getAlpha(pixels[x][y]);
                raster.setPixel(x, y, pixel);
            }
        }

        testImage = image;
    }

    @Override
    public void paintComponent(Graphics g) {
        g.drawImage(testImage, 0, 0, null);
    }

    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                int image_width = 600;
                int image_height = 400;

                JFrame frame = new JFrame("Test Simplex Texture Image");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setSize(image_width+10, image_height+40);
                TestTemplate panel = new TestTemplate(image_width, image_height);
                frame.add(panel);
                frame.setVisible(true);
            }
        });
    }
}


/**
 * Immutable class representing a color map.
 */
class ColorMap {

    public final int[] data;

    public ColorMap() {
        data = new int[256];

        // default data will be black to white gradient
        for (int i = 0;  i < 256;  i++) {
            data[i] = calculateARGB(255, i, i, i);
        }
    }

    public ColorMap(int[] data) {
        this.data = Arrays.copyOf(data, 256);
    }

    public static int getAlpha(int pixel) {
        return (pixel & 0xFF000000) >> 24;
    }

    public static int getRed(int pixel) {
        return (pixel & 0x00FF0000) >> 16;
    }

    public static int getGreen(int pixel) {
        return (pixel & 0x0000FF00) >> 8;
    }

    public static int getBlue(int pixel) {
        return (pixel & 0x000000FF);
    }

    public static int calculateARGB(int a, int r, int g, int b) {
        return b + (g << 8) + (r <<16) + (a << 24);
    }
}


/**
 * Immutable class representing parameters for a single texture source.
 */
class TextureParams {

    public enum NoiseNormalization {
        SMOOTH,
        ABS,
        NONE
    }

    // typically ranges from 0.125 to 128.0
    public final float xScale;
    public final float yScale;

    // typically ranges from -256.0 to 256.0
    public final float xTranslate;
    public final float yTranslate;

    // typically ranges from -1.0 to 1.0
    public final float minClamp;
    public final float maxClamp;

    public final NoiseNormalization normalize;

    public final ColorMap colorMap;

    public TextureParams(float xScale,
                         float yScale,
                         float xTranslate,
                         float yTranslate,
                         float minClamp,
                         float maxClamp,
            NoiseNormalization normalize,
                      ColorMap colorMap) {
        this.xScale = xScale;
        this.yScale = yScale;
        this.xTranslate = xTranslate;
        this.yTranslate = yTranslate;
        this.minClamp = minClamp;
        this.maxClamp = maxClamp;
        this.normalize = normalize;
        this.colorMap = colorMap;
    }
}


/**
 * Immutable class that contains the parameters for combining the textures
 * into a single texture.
 *
 * There are 4 channels and each one has a channel mode and slider value.
 *
 * Channels are then grouped by their channel mode.  Each group then has its own
 * group mode and slider value.
 */
class CombineParams {

    public enum ChannelMode {
        ADD,
        LERP,
        SIN,
        XDIM,
        YDIM,
        CIRC
    }

    public enum GroupMode {
        ADD,
        LERP,
        RING
    }

    public final int numChannels;

    private final ChannelMode[] channelModes;
    private final int[] stage1weights;  // weight stage 1

    private final Map<ChannelMode, GroupMode> groupModes;
    private final Map<ChannelMode, Integer> stage2weights;  // weight stage 2

    public CombineParams(           int numChannels,
                          ChannelMode[] channelModes,
                                  int[] stage1weights,
            Map<ChannelMode, GroupMode> groupModes,
            Map<ChannelMode, Integer>   stage2weights) {

        this.numChannels = numChannels;

        assert(channelModes.length == numChannels);
        assert(stage1weights.length == numChannels);

        Set<ChannelMode> specifiedModes = new HashSet<ChannelMode>();

        this.channelModes = channelModes;
        this.stage1weights = stage1weights;
        for (int i = 0;  i < numChannels;  i++) {
            specifiedModes.add(channelModes[i]);
        }

        assert(specifiedModes.equals(groupModes.keySet()));
        assert(specifiedModes.equals(stage2weights.keySet()));

        this.groupModes = groupModes;
        this.stage2weights = stage2weights;
    }

    public ChannelMode getChannelMode(int index) {
        return channelModes[index];
    }

    public int getStage1Weight(int index) {
        return stage1weights[index];
    }

    public Set<ChannelMode> getGroups() {
        return groupModes.keySet();
    }

    public GroupMode getGroupMode(ChannelMode mode) {
        return groupModes.get(mode);
    }

    public int getStage2Weight(ChannelMode mode) {
        return stage2weights.get(mode);
    }
}


/**
 * Immutable data structure containing the return result from a single texture
 * generation function.  Contains all necessary data to generate an image.
 */
class TextureData {

    public final int width;
    public final int height;

    public final float[][] noiseArray;
    public final ColorMap colorMap;

    public TextureData(int width, int height, float[][] noiseArray, ColorMap colorMap) {
        this.width = width;
        this.height = height;

        assert(width > 0);
        assert(height > 0);
        assert(noiseArray.length == width * height);
        this.noiseArray = noiseArray;
        this.colorMap = colorMap;
    }
}


// temporarily used by combine()
class ChannelGroup {
    ArrayList<Integer> members = new ArrayList<Integer>();
    // x, y noise data, merged via "mode" function
    float[][] noiseVals;

    public ChannelGroup(int width, int height) {
        noiseVals = new float[width][height];
    }
}


/**
 * Pure functions to generate and combine textures.
 */
class TextureFunctions {

    /**
     * Generate the data necessary to create a single texture.
     *
     * This is a pure function.
     *
     * @param width     image width
     * @param height    image height
     * @param tp        texture parameters from SimplexTextureSource
     *
     * @return TextureData
     */
    public static TextureData generate(int width, int height, TextureParams tp) {
        float[][] noiseArray = new float[width][height];

        for (int j = 0; j < height; j++) {
            float y = (j * tp.yScale) / 256.0f + tp.yTranslate;

            for (int i = 0; i < width; i++) {
                float x = (i * tp.xScale) / 256.0f + tp.xTranslate;

                float noiseVal = (float) SimplexNoise.noise(x, y);
                noiseVal = Math.min(Math.max(noiseVal, tp.minClamp), tp.maxClamp);

                if (tp.normalize == TextureParams.NoiseNormalization.SMOOTH) {
                    noiseVal = (noiseVal + 1) / 2;
                } else if (tp.normalize == TextureParams.NoiseNormalization.ABS) {
                    noiseVal = Math.abs(noiseVal);
                }

                noiseArray[i][j] = noiseVal;
            }
        }

        return new TextureData(width, height, noiseArray, tp.colorMap);
    }

    /**
     * Combine multiple textures into one.
     *
     * This is a pure function.
     *
     * @param textures    to combine
     * @param cp          combine parameters from TextureCombiner
     *
     * @return pixel array containing argb values suitable for BufferedImage.setRGB
     */
    public static int[][] combine(List<TextureData> textures, CombineParams cp) {
        int channels = textures.size();

        int width = -1;
        int height = -1;

        // ensure all textures are the same size
        for (TextureData texture : textures) {
            if (width == -1) {
                width = texture.width;
            } else {
                assert(width == texture.width);
            }

            if (height == -1) {
                height = texture.height;
            } else {
                assert(height == texture.height);
            }
        }

        // There are between 1-4 channel groups and each one has at least one member.
        // ChannelGroup.members is a set of indices ranging from 0-3
        Map<CombineParams.ChannelMode, ChannelGroup> channelData = new HashMap<CombineParams.ChannelMode, ChannelGroup>();

        for (CombineParams.ChannelMode stage1ChannelMode : cp.getGroups())
        {
            ChannelGroup cg = new ChannelGroup(width, height);
            for (int i = 0;  i < channels;  i++) {
                if (stage1ChannelMode == cp.getChannelMode(i)) {
                    cg.members.add(i);
                }
            }
            channelData.put(stage1ChannelMode, cg);

            // SUM mode
            if (stage1ChannelMode == CombineParams.ChannelMode.ADD)
            {
                float[] weight = new float[channels];
                for (int i : cg.members) {
                    weight[i] = cp.getStage1Weight(i) / 64f;
                }

                for (int j = 0; j < height; j++) {
                    for (int i = 0; i < width; i++) {
                        float sum = 0;
                        for (int idx : cg.members) {
                            sum += textures.get(idx).noiseArray[i][j] * weight[idx];
                        }
                        cg.noiseVals[i][j] = sum;
                    }
                }
            }

            if (stage1ChannelMode == CombineParams.ChannelMode.LERP)
            {
                float[] weight = new float[channels];
                float weightSum = 0;

                for (int i : cg.members) {
                    weightSum += cp.getStage1Weight(i);
                }
                for (int i : cg.members) {
                    weight[i] = cp.getStage1Weight(i) / weightSum;
                }

                for (int j = 0; j < height; j++) {
                    for (int i = 0; i < width; i++) {
                        float sum = 0;
                        for (int idx : cg.members) {
                            sum += textures.get(idx).noiseArray[i][j] * weight[idx];
                        }
                        cg.noiseVals[i][j] = sum;
                    }
                }
            }

            if (stage1ChannelMode == CombineParams.ChannelMode.SIN)
            {
                for (int j = 0; j < height; j++) {
                    for (int i = 0; i < width; i++) {
                        float sum = 0;
                        for (int idx : cg.members) {
                            sum += textures.get(idx).noiseArray[i][j] * (cp.getStage1Weight(idx) / 128f);
                        }
                        cg.noiseVals[i][j] = (float)Math.sin(i/24f + sum);
                    }
                }
            }

            if (stage1ChannelMode == CombineParams.ChannelMode.XDIM)
            {
                for (int j = 0; j < height; j++) {
                    for (int i = 0; i < width; i++) {
                        float sum = 0;
                        for (int idx : cg.members) {
                            sum += textures.get(idx).noiseArray[i][j] * (cp.getStage1Weight(idx) / 128f);
                        }
                        cg.noiseVals[i][j] = (i/256f + sum);
                    }
                }
            }

            if (stage1ChannelMode == CombineParams.ChannelMode.YDIM)
            {
                for (int j = 0; j < height; j++) {
                    for (int i = 0; i < width; i++) {
                        float sum = 0;
                        for (int idx : cg.members) {
                            sum += textures.get(idx).noiseArray[i][j] * (cp.getStage1Weight(idx) / 128f);
                        }
                        cg.noiseVals[i][j] = (j/256f + sum);
                    }
                }
            }


            if (stage1ChannelMode == CombineParams.ChannelMode.CIRC)
            {
                Point middle = new Point(128, 128);

                for (int j = 0; j < height; j++) {
                    for (int i = 0; i < width; i++) {
                        float sum = 0;
                        for (int idx : cg.members) {
                            sum += textures.get(idx).noiseArray[i][j] * (cp.getStage1Weight(idx) / 128f);
                        }
                        float r = (float)middle.distance(i, j)/192f;
                        r = Math.min(r, 1);

                        cg.noiseVals[i][j] = (r + sum);
                    }
                }
            }
        }

        // now turn this into a graphic...via the colormap
        int[][] pixelArray = new int[width][height];

        // stage 2

        ArrayList<CombineParams.ChannelMode> channelArray = new ArrayList<CombineParams.ChannelMode>();
        for (int c = 0;  c < channels;  c++) {
            CombineParams.ChannelMode channelMode = cp.getChannelMode(c);

            if (!channelArray.contains(channelMode)) {
                channelArray.add(channelMode);
            }
        }

        int chCount = channelArray.size();
        double[] weight = new double[chCount];
        ColorMap[] colorMaps = new ColorMap[chCount];

        for (int i = 0; i < chCount; i++) {
            weight[i] = cp.getStage2Weight(channelArray.get(i));  // value from slider/txtfield
            colorMaps[i] = textures.get(channelData.get(channelArray.get(i)).members.get(0)).colorMap;  //colormap data, shared
        }

        double lerpSum = 0;
        for (int cgIdx = 0; cgIdx < chCount; cgIdx++) {
            if (cp.getGroupMode(channelArray.get(cgIdx)) == CombineParams.GroupMode.LERP) {
                lerpSum += weight[cgIdx];
            }
        }
        for (int cgIdx = 0; cgIdx < chCount; cgIdx++) {
            if (cp.getGroupMode(channelArray.get(cgIdx)) == CombineParams.GroupMode.LERP) {
                weight[cgIdx] /= lerpSum;  // lerp factor
            } else {
                // presumably SUM or MOD
                weight[cgIdx] /= 64;  // add factor
            }
        }  // weights are now a fraction of 1

        double rPixel, gPixel, bPixel;
        for (int j = 0; j < height; j++) {
            for (int i = 0; i < width; i++) {
                // for each pixel
                rPixel = 0;
                gPixel = 0;
                bPixel = 0;

                float denormalizingFactor = 255f;
                for (int channelGroupIdx = 0; channelGroupIdx < chCount; channelGroupIdx++) {
                    CombineParams.ChannelMode stage1ChannelModeKey = channelArray.get(channelGroupIdx);

                    int colorMapIdx = (int)(channelData.get(stage1ChannelModeKey).noiseVals[i][j] * denormalizingFactor);

                    if (cp.getGroupMode(stage1ChannelModeKey) == CombineParams.GroupMode.ADD ||
                            cp.getGroupMode(stage1ChannelModeKey) == CombineParams.GroupMode.LERP) {
                        colorMapIdx = Math.min(255, Math.max(0, colorMapIdx));
                    } else if (cp.getGroupMode(stage1ChannelModeKey) == CombineParams.GroupMode.RING) {
                        while (colorMapIdx < 0) colorMapIdx += 256;
                        colorMapIdx %= 256;
                    } else {
                        throw new RuntimeException("not handled! " + stage1ChannelModeKey);
                    }

                    rPixel += ColorMap.getRed(colorMaps[channelGroupIdx].data[colorMapIdx]) * weight[channelGroupIdx];
                    gPixel += ColorMap.getGreen(colorMaps[channelGroupIdx].data[colorMapIdx]) * weight[channelGroupIdx];
                    bPixel += ColorMap.getBlue(colorMaps[channelGroupIdx].data[colorMapIdx]) * weight[channelGroupIdx];
                }
                int pixel = ColorMap.calculateARGB(255,
                        (int)Math.min(255, Math.max(0, rPixel)),
                        (int)Math.min(255, Math.max(0, gPixel)),
                        (int)Math.min(255, Math.max(0, bPixel)));

                pixelArray[i][j] = pixel;
            }
        }

        return pixelArray;
    }
}


/**
 * Simplex noise in 2D.
 *
 * Based on example code by Stefan Gustavson (stegu@itn.liu.se).
 * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
 * Better rank ordering method by Stefan Gustavson in 2012.
 *
 * This code was placed in the public domain by its original author,
 * Stefan Gustavson. You may use it as you see fit, but
 * attribution is appreciated.
 */
class SimplexNoise {
    private static Grad grad3[] = {
        new Grad(1,1,0),new Grad(-1,1,0),new Grad(1,-1,0),new Grad(-1,-1,0),
        new Grad(1,0,1),new Grad(-1,0,1),new Grad(1,0,-1),new Grad(-1,0,-1),
        new Grad(0,1,1),new Grad(0,-1,1),new Grad(0,1,-1),new Grad(0,-1,-1)
    };

    private static short p[] = {151,160,137,91,90,15,131,13,201,95,96,53,194,
    233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,
    75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,
    20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,
    111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,
    25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,
    188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,
    147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,
    183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,
    22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,
    34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,
    192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,
    236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180};

    // To remove the need for index wrapping, double the permutation table
    // length.
    private static short perm[] = new short[512];
    private static short permMod12[] = new short[512];

    static {
        for (int i = 0; i < 512; i++) {
            perm[i]=p[i & 255];
            permMod12[i] = (short)(perm[i] % 12);
        }
    }

    // Skewing and unskewing factors for 2 dimensions
    private static final double F2 = 0.5*(Math.sqrt(3.0)-1.0);
    private static final double G2 = (3.0-Math.sqrt(3.0))/6.0;

    // This method is a *lot* faster than using (int)Math.floor(x)
    private static int fastfloor(double x) {
        int xi = (int)x;
        return x<xi ? xi-1 : xi;
    }

    private static double dot(Grad g, double x, double y) {
        return g.x*x + g.y*y;
    }

    // 2D simplex noise
    public static double noise(double xin, double yin) {
        double n0, n1, n2; // Noise contributions from the three corners
        // Skew the input space to determine which simplex cell we're in
        double s = (xin+yin)*F2; // Hairy factor for 2D
        int i = fastfloor(xin+s);
        int j = fastfloor(yin+s);
        double t = (i+j)*G2;
        double X0 = i-t; // Unskew the cell origin back to (x,y) space
        double Y0 = j-t;
        double x0 = xin-X0; // The x,y distances from the cell origin
        double y0 = yin-Y0;

        // For the 2D case, the simplex shape is an equilateral triangle.
        // Determine which simplex we are in.
        int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
        if (x0>y0) {
            i1=1;
            j1=0;
        } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
        else {i1=0; j1=1;}      // upper triangle, YX order: (0,0)->(0,1)->(1,1)
        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
        // c = (3-sqrt(3))/6
        double x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
        double y1 = y0 - j1 + G2;
        double x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
        double y2 = y0 - 1.0 + 2.0 * G2;

        // Work out the hashed gradient indices of the three simplex corners
        int ii = i & 255;
        int jj = j & 255;
        int gi0 = permMod12[ii+perm[jj]];
        int gi1 = permMod12[ii+i1+perm[jj+j1]];
        int gi2 = permMod12[ii+1+perm[jj+1]];

        // Calculate the contribution from the three corners
        double t0 = 0.5 - x0*x0-y0*y0;
        if (t0 < 0) {
            n0 = 0.0;
        } else {
            t0 *= t0;
            n0 = t0 * t0 * dot(grad3[gi0], x0, y0);  // (x,y) of grad3 used for 2D gradient
        }

        double t1 = 0.5 - x1*x1-y1*y1;
        if (t1<0) {
            n1 = 0.0;
        } else {
            t1 *= t1;
            n1 = t1 * t1 * dot(grad3[gi1], x1, y1);
        }

        double t2 = 0.5 - x2*x2-y2*y2;
        if (t2 < 0) {
            n2 = 0.0;
        } else {
            t2 *= t2;
            n2 = t2 * t2 * dot(grad3[gi2], x2, y2);
        }

        // Add contributions from each corner to get the final noise value.
        // The result is scaled to return values in the interval [-1,1].
        return 70.0 * (n0 + n1 + n2);
    }

    // Inner class to speed up gradient computations
    // (array access is a lot slower than member access)
    private static class Grad {
        final double x, y, z;

        Grad(double x, double y, double z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
    }
}
